struct Object
{
	void** Data; // массив У-лей на Э-ы хэш-таблицы
	Object(int, int(*)(void*));
	// КОНСТРУКТОР нужен для выполнения однотипных действий при создании хэш-таблиц
	// 1-ый параметр конструктора - размерность массива Э-в хэш-таблицы (в нашем примере это 5), 2-ой - функция для получения ключей из Э-ов
	int Size; // максимальное количество Э-в в таблице
	int N; // текущее количество Э-в
	int(*GetKey)(void*);
	// функция для получения ключей из Э-ов, *GetKey - передаём У-ль на функцию
	// void* - функция принимает в качестве аргумента У-ль на произвольные данные
	bool Insert(void*); // функция вставки Э-а в хэш-таблицу
	int SearchInd(int key);
	// функция поиска позиции Э-а в хэш-таблице по ключу, Ind - индекс. то есть позиция
	void* Search(int key); // функция поиска У-ля на Э-т по ключу
	void* Delete(int key); // функция удаления Э-а по ключу
	bool Delete(void*); // функция удаления Э-а по данным
	void Scan(void(*f)(void*));
	// функция вывода хэш-таблицы, которая принимает функцию для вывода одного Э-а
	// а та в свою очередь принимает в качестве аргумента У-ль на произвольные данные
	double koefzap(); // функция для расчёта коэффициента заполненности хэш-таблицы
};
static void* DEL = (void*)-1; // создание ещё одного У-ля для обозначения удалённых Э-в
Object Create(int size, int(*getkey)(void*));// функция для создания хэш-таблицы, принимает максимальный размер таблицы и функцию получения ключа из Э-в
#pragma once
